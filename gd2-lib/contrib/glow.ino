#include <EEPROM.h>
#include <SPI.h>
#include <GD2.h>

//>>> [int(255*math.exp(-(x**2)/(2.*100**2))) for x in range(240)]
static PROGMEM uint8_t glow[] = {
14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 18, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 32, 33, 33, 34, 35, 35, 36, 37, 38, 38, 39, 40, 41, 41, 42, 43, 44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 93, 94, 95, 97, 98, 99, 101, 102, 103, 105, 106, 108, 109, 110, 112, 113, 115, 116, 118, 119, 121, 122, 124, 125, 127, 128, 130, 131, 133, 134, 136, 137, 139, 140, 142, 143, 145, 146, 148, 150, 151, 153, 154, 156, 157, 159, 160, 162, 163, 165, 167, 168, 170, 171, 173, 174, 176, 177, 179, 180, 182, 183, 185, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 202, 203, 205, 206, 207, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 238, 239, 240, 241, 242, 243, 243, 244, 245, 245, 246, 247, 247, 248, 248, 249, 249, 250, 250, 251, 251, 252, 252, 252, 253, 253, 253, 253, 254, 254, 254, 254, 254, 254, 254, 254, 255, 254, 254, 254, 254, 254, 254, 254, 254, 253, 253, 253, 253, 252, 252, 252, 251, 251, 250, 250, 249, 249, 248, 248, 247, 247, 246, 245, 245, 244, 243, 243, 242, 241, 240, 239, 238, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 223, 222, 221, 220, 219, 217, 216, 215, 214, 212, 211, 210, 209, 207, 206, 205, 203, 202, 200, 199, 198, 196, 195, 193, 192, 191, 189, 188, 186, 185, 183, 182, 180, 179, 177, 176, 174, 173, 171, 170, 168, 167, 165, 163, 162, 160, 159, 157, 156, 154, 153, 151, 150, 148, 146, 145, 143, 142, 140, 139, 137, 136, 134, 133, 131, 130, 128, 127, 125, 124, 122, 121, 119, 118, 116, 115, 113, 112, 110, 109, 108, 106, 105, 103, 102, 101, 99, 98, 97, 95, 94, 93, 91, 90, 89, 87, 86, 85, 84, 82, 81, 80, 79, 77, 76, 75, 74, 73, 72, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 46, 45, 44, 43, 42, 41, 41, 40, 39, 38, 38, 37, 36, 35, 35, 34, 33, 33, 32, 31, 31, 30, 29, 29, 28, 28, 27, 26, 26, 25, 25, 24, 24, 23, 23, 22, 22, 21, 21, 20, 20, 19, 19, 18, 18, 18, 17, 17, 16, 16, 16, 15, 15, 15, 14
};

void setup()
{
  GD.begin();

  GD.cmd_memwrite(0, 480);
  GD.copy(glow, sizeof(glow));

  GD.Clear();
  GD.cmd_text(240, 136, 31, OPT_CENTER, "Hello world");

  GD.BitmapHandle(0);
  GD.BitmapSource(0);
  GD.BitmapSize(NEAREST, BORDER, REPEAT, 480, 272);
  GD.BitmapLayout(L8, 480, 1);

  GD.BitmapHandle(1);
  GD.BitmapSource(240-136);
  GD.BitmapSize(NEAREST, REPEAT, BORDER, 480, 272);
  GD.BitmapLayout(L8, 1, 480);
  GD.swap();

  for (int i = 0; i < 800; i++) {
    GD.Clear();
    int l = min(255, i);
    GD.ColorRGB(l, l, l);
    GD.BlendFunc(SRC_ALPHA, ONE);
    GD.Begin(BITMAPS);
    GD.Vertex2ii(0,0,0,0);
    GD.Vertex2ii(0,0,1,0);
    l = min(255, i - 60);
    if (l > 0) {
      GD.ColorRGB(l, l, l);
      GD.BlendFunc(ONE, ONE);
      GD.Vertex2ii(0,0,0,0);
    }
    GD.swap();
  }
}

void loop()
{
}
